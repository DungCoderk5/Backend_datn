
generator client {
  provider = "prisma-client-js"
}
    datasource db {
      provider = "mysql"
      url      = env("DATABASE_URL")
    }
model users {
  user_id    Int      @id @default(autoincrement())
  name       String?  @db.VarChar(191)
  email      String?  @unique @db.VarChar(191)
  password   String?  @db.VarChar(191)
  phone      String?  @db.VarChar(191)
  role       String?  @db.VarChar(191)
  status     Int?     @default(1) @db.TinyInt
  avatar     String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  product_compares product_compares[] @relation("UserProductCompares")
  carts           carts[]
  orders          orders[]
  posts           posts[]
  product_reviews product_reviews[]
  ship_addresses  ship_address[]
  wishlist_items  wishlist_items[]
}

model brands {
  brand_id Int     @id @default(autoincrement())
  name     String  @db.VarChar(191)
  slug     String? @db.VarChar(191)
  logo_url String? @db.Text

  // Relations
  products products[]
}

model categories {
  categories_id Int     @id @default(autoincrement())
  name          String  @db.VarChar(191)
  slug          String? @db.VarChar(191)
  parent_id     Int?

  // Relations
  parent   categories?  @relation("CategoryChildren", fields: [parent_id], references: [categories_id])
  children categories[] @relation("CategoryChildren")
  products products[]
}

model genders {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  // Relations
  products products[]
}

model colors {
  id         Int     @id @default(autoincrement())
  code_color String? @db.VarChar(50)
  name_color String? @db.VarChar(100)
  images     String? @db.VarChar(191)

  // Relations
  product_variants product_variants[]
}

model sizes {
  id          Int     @id @default(autoincrement())
  number_size String? @db.VarChar(50)

  // Relations
  product_variants product_variants[]
}

model products {
  products_id   Int      @id @default(autoincrement())
  name          String   @db.VarChar(191)
  slug          String?  @db.VarChar(191)
  description   String?  @db.Text
  short_desc    String?  @db.Text
  price         Decimal? @db.Decimal(10, 2)
  sale_price    Decimal? @db.Decimal(10, 2)
  categories_id Int?
  brand_id      Int?
  gender_id     Int?
  status        Int?     @default(1) @db.TinyInt
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relations
  product_compares product_compares[] @relation("ProductCompares")
  category         categories?       @relation(fields: [categories_id], references: [categories_id])
  brand            brands?           @relation(fields: [brand_id], references: [brand_id])
  gender           genders?          @relation(fields: [gender_id], references: [id])
  images           images[]
  product_reviews  product_reviews[]
  product_variants product_variants[]
  wishlist_items   wishlist_items[]
}

model product_variants {
  product_variants_id Int     @id @default(autoincrement())
  product_id          Int?
  color_id            Int?
  size_id             Int?
  stock_quantity      Int?
  sku                 String? @db.VarChar(100)

  // Relations
  product     products?    @relation(fields: [product_id], references: [products_id])
  color       colors?      @relation(fields: [color_id], references: [id])
  size        sizes?       @relation(fields: [size_id], references: [id])
  cart_items  cart_items[]
  order_items order_items[]
}

model images {
  images_id  Int     @id @default(autoincrement())
  url        String? @db.Text
  alt_text   String? @db.VarChar(191)
  type       String? @db.VarChar(50)
  product_id Int?

  // Relations
  product products? @relation(fields: [product_id], references: [products_id])
}

model product_reviews {
  product_reviews_id Int       @id @default(autoincrement())
  user_id            Int
  product_id         Int
  rating             Int?
  content            String?   @db.Text
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @updatedAt @db.Timestamp(0)

  // Relations
  user    users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  product products @relation(fields: [product_id], references: [products_id], onDelete: Cascade)


  @@unique([user_id, product_id], name: "unique_user_product")
}

model carts {
  carts_id   Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  user       users        @relation(fields: [user_id], references: [user_id])
  cart_items cart_items[]
}

model cart_items {
  cart_items_id Int      @id @default(autoincrement())
  cart_id       Int
  variant_id    Int
  quantity      Int
  price         Decimal? @db.Decimal(10, 2)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relations
  cart    carts           @relation(fields: [cart_id], references: [carts_id])
  variant product_variants @relation(fields: [variant_id], references: [product_variants_id])
}

model payment_method {
  id          Int     @id @default(autoincrement())
  name_method String  @db.VarChar(100)
  description String? @db.Text
  is_active   Boolean @default(true) @db.TinyInt

  // Relations
  orders orders[]
}

model coupons {
  coupons_id     Int                    @id @default(autoincrement())
  code           String                 @unique @db.VarChar(100)
  discount_type  CouponDiscountType
  discount_value Decimal                @db.Decimal(10, 2)
  start_date     DateTime?              @db.Date
  end_date       DateTime?              @db.Date
  usage_limit    Int?
  used_count     Int                    @default(0)
  created_at     DateTime               @default(now())
  updated_at     DateTime               @default(now()) @updatedAt

  // Relations
  orders orders[]
}

enum CouponDiscountType {
  percentage
  fixed
}

model ship_address {
  ship_address_id Int     @id @default(autoincrement())
  user_id         Int
  full_name       String? @db.VarChar(191)
  phone           String? @db.VarChar(191)
  address_line    String? @db.Text
  is_default      Boolean @default(false) @db.TinyInt

  // Relations
  user   users    @relation(fields: [user_id], references: [user_id])
  orders orders[]
}

model orders {
  orders_id           Int      @id @default(autoincrement())
  user_id             Int
  status              String   @db.VarChar(50)
  total_amount        Decimal  @db.Decimal(10, 2)
  payment_method_id   Int?
  shipping_address_id Int?
  coupons_id          Int?
  comment             String?  @db.Text
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt

  // Relations
  user             users          @relation(fields: [user_id], references: [user_id])
  payment_method   payment_method? @relation(fields: [payment_method_id], references: [id])
  shipping_address ship_address?   @relation(fields: [shipping_address_id], references: [ship_address_id])
  coupon           coupons?        @relation(fields: [coupons_id], references: [coupons_id])
  order_items      order_items[]
}

model order_items {
  order_items_id Int      @id @default(autoincrement())
  variant_id     Int
  order_id       Int
  quantity       Int
  unit_price     Decimal? @db.Decimal(10, 2)

  // Relations
  variant product_variants @relation(fields: [variant_id], references: [product_variants_id])
  order   orders           @relation(fields: [order_id], references: [orders_id])
}

model wishlist_items {
  wishlist_items_id Int      @id @default(autoincrement())
  user_id           Int
  product_id        Int
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  // Relations
  user    users    @relation(fields: [user_id], references: [user_id])
  product products @relation(fields: [product_id], references: [products_id])
}

model categories_post {
  category_post_id Int     @id @default(autoincrement())
  name             String  @db.VarChar(191)
  slug             String  @unique @db.VarChar(191)
  parent_id        Int?

  // Relations
  parent   categories_post? @relation("CategoryPostChildren", fields: [parent_id], references: [category_post_id])
  children categories_post[] @relation("CategoryPostChildren")
  posts    posts[]
}

model posts {
  post_id          Int      @id @default(autoincrement())
  title            String   @db.VarChar(191)
  slug             String   @unique @db.VarChar(191)
  content          String?  @db.Text
  thumbnail        String?  @db.Text
  images           String?  @db.VarChar(191)
  status           Int?     @default(1) @db.TinyInt
  category_post_id Int?
  author_id        Int?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  // Relations
  category_post categories_post? @relation(fields: [category_post_id], references: [category_post_id])
  author        users?           @relation(fields: [author_id], references: [user_id])
}

model product_compares {
  product_compare_id Int      @id @default(autoincrement())
  user_id            Int
  product_id         Int
  created_at         DateTime @default(now())

  // Relations
  user    users    @relation("UserProductCompares", fields: [user_id], references: [user_id], onDelete: Cascade)
  product products @relation("ProductCompares", fields: [product_id], references: [products_id], onDelete: Cascade)

  @@unique([user_id, product_id], name: "unique_user_product")
}

